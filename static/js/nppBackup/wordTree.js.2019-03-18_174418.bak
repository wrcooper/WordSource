
var width = 960;
var height = 2400;
  
function drawTree(nodes){
  removeSVG();
  
  var svg = d3.select("svg");
    
  d3.select("svg")
    .style("width", "960")
    .style('height', "2400");

   d3.csv("./../static/flare.csv", function(error, data) {
    if (error) throw error;

    var stratify = d3.stratify()
      .parentId(function(d) { return d.id.substring(0, d.id.lastIndexOf(".")); });
      
    var main_root = stratify(data)
        .sort(function(a, b) { return (a.height - b.height) || a.id.localeCompare(b.id); });
    console.log(main_root);
        
    root = main_root;
    
    drawRoot(root, nodes);
  });
  
}

function getFirstLevels(root, n){
  var tempArray = [];
  getFirstLevelsRec(tempArray, root, n - 1);
  return tempArray;
}

function getFirstLevelsRec(array, root, n){
  for (i in root.children){
    if (n <= 0) {
      root.children[i]._children = root.children[i].children;
      root.children[i].children = null;
      array.push(root.children[i]);
    } else {
      getFirstLevelsRec(array, root, n - 1);
    }
  }
}

function drawRoot(root, nodes){
  var svg = d3.select("svg");
  
  var tree = d3.tree()
    .size([height - 400, width - 160]);
    
  
  
  console.log(nodes);
  
  /* nodes = d3.hierarchy(nodes[0], function(d){
    return d.children;
  }); */

  var links = tree(nodes);
  
  console.log(links);

  tree(root);
    
  var g = svg.append("g").attr("transform", "translate(40,0)");
  
  var link = g.selectAll(".link")
      .data(root.descendants().slice(1))
    .enter().append("path")
      .attr("class", "link")
      .attr("d", diagonal);

  var node = g.selectAll(".node")
      .data(root.descendants())
    .enter().append("g")
      .attr("class", function(d) { return "node" + (d.children ? " node--internal" : " node--leaf"); })
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  node.append("circle")
      .attr("r", 2.5);

  node.append("text")
      .attr("dy", 3)
      .attr("x", function(d) { return d.children ? -8 : 8; })
      .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
      .text(function(d) { return d.id.substring(d.id.lastIndexOf(".") + 1); })
      .on("click", function (s){
        changed(s);
      })
      
  function changed(s) {
      d3.selectAll("svg > *").remove();
      // Change to new root
      root = s;
      setRoot(root)
      console.log(root);
      tree(root);
      drawRoot(root);
      var t = d3.transition().duration(750);
      node.transition(t).attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
      link.transition(t).attr("d", diagonal);
    }
}

function setRoot(root){
  var offset = root.depth;
  root.depth = 0;
  applyOffsetChildren(root, offset);
}

function applyOffsetChildren(root, offset){
  for (var index in root.children){
    var child = root.children[index];
    child.depth -= offset;
    if (child.children == null) continue;
    applyOffsetChildren(child, offset);
  }
}

function diagonal(d) {
  return "M" + d.y + "," + d.x
      + "C" + (d.parent.y + 100) + "," + d.x
      + " " + (d.parent.y + 100) + "," + d.parent.x
      + " " + d.parent.y + "," + d.parent.x;
}