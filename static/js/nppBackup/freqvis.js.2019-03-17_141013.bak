function removeSVG(){
  d3.selectAll("svg > *").remove();
  d3.select('svg')
    .style('background-color', '#2F4A6D')
    .style("width", '2000')
    .style('height', '600');
}

function drawTokVis(freq_dist, max, filename){
  removeSVG();
  
  const margin = 60;
  const width = 2000 - 2 * margin;
  const height = 600 - 2 * margin;

  const svg = d3.select('svg');

  const chart = svg.append('g')
    .attr('transform', `translate(${margin}, ${margin})`);
    
  const yScale = d3.scaleLinear()
    .range([height, 0])
    .domain([0, max]);
    
  chart.append('g')
    .call(d3.axisLeft(yScale));
    
   
  const xScale = d3.scaleBand()
    .range([0, width])
    .domain(freq_dist.map((s) => s.token))
    .padding(0.2);
    
  chart.append('g')
    .attr('transform', `translate(0, ${height})`)
    .call(d3.axisBottom(xScale));
    
  rects = chart.selectAll()
    .data(freq_dist)
    .enter()
    .append('rect')
    .attr('x', (s) => xScale(s.token))
    .attr('y', (s) => yScale(s.freq))
    .attr('height', (s) => height - yScale(s.freq))
    .attr('width', xScale.bandwidth())
    .on('mouseenter', function(){
      d3.select(this).style('opacity', 0.5);
    })
    .on('mouseleave', function(){
      d3.select(this).style('opacity', 1);
    })
    .on("click", function(s){
      console.log(s);
      /* if (APP.selected.exclusion_mode == true){
        add_exclusion(s.token);
      } */
    })
    .append('text')
      .attr('class', 'value')
      .attr('x', (s) => xScale(s.token) + xScale.bandwidth() / 2)
      .attr('y', (s) => yScale(s.freq) + 30)
      .attr('text-anchor', 'middle')
      .text("test")
    
  chart.append('g')
    .attr('class', 'grid')
    .call(d3.axisLeft()
        .scale(yScale)
        .tickSize(-width, 0, 0)
        .tickFormat(''))
        
  svg.append('text')
    .attr('x', -(height / 2) - margin)
    .attr('y', margin / 2.4 - 10)
    .attr('transform', 'rotate(-90)')
    .attr('text-anchor', 'middle')
    .style('font-size', '20px')
    .text('Token Frequency in Text (%)')

  svg.append('text')
    .attr('x', margin + 100)
    .attr('y', 30)
    .attr('text-anchor', 'middle')
    .style('font-size', '20px')
    .text("Token Frequency of \"" + filename + "\"")
    
  svg.append('text')
    .attr('x', margin + 400)
    .attr('y', height + 110)
    .attr('text-anchor', 'middle')
    .style('font-size', '20px')
    .text("Token")
}

function drawLenVis(freq_dist, max, filename){
  removeSVG();
  
  const margin = 60;
  const width = 2000 - 2 * margin;
  const height = 600 - 2 * margin;

  const svg = d3.select('svg');

  const chart = svg.append('g')
    .attr('transform', `translate(${margin}, ${margin})`);
    
  const yScale = d3.scaleLinear()
    .range([height, 0])
    .domain([0, max]);
    
  chart.append('g')
    .call(d3.axisLeft(yScale));
    
  const xScale = d3.scaleBand()
    .range([0, width])
    .domain(freq_dist.map((s) => s.len))
    .padding(0.2);
    
  chart.append('g')
    .attr('transform', `translate(0, ${height})`)
    .call(d3.axisBottom(xScale));
    
  chart.selectAll()
    .data(freq_dist)
    .enter()
    .append('rect')
    .attr('x', (s) => xScale(s.len))
    .attr('y', (s) => yScale(s.freq))
    .attr('height', (s) => height - yScale(s.freq))
    .attr('width', xScale.bandwidth());

  chart.append('g')
    .attr('class', 'grid')
    .call(d3.axisLeft()
        .scale(yScale)
        .tickSize(-width, 0, 0)
        .tickFormat(''))
        
  svg.append('text')
    .attr('x', -(height / 2) - margin)
    .attr('y', margin / 2.4 - 10)
    .attr('transform', 'rotate(-90)')
    .attr('text-anchor', 'middle')
    .style('font-size', '20px')
    .text('Token Length Frequency in Text (%)')

  svg.append('text')
    .attr('x', margin + 200)
    .attr('y', 30)
    .attr('text-anchor', 'middle')
    .style('font-size', '20px')
    .text("Token Length Frequency of \"" + filename + "\"")
    
  svg.append('text')
    .attr('x', margin + 400)
    .attr('y', height + 110)
    .attr('text-anchor', 'middle')
    .style('font-size', '20px')
    .text("Token Length")
}
