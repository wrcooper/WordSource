function drawTree(){
  removeSVG();
  
  var svg = d3.select("svg"),
    width = 960,
    height = 2400,
    g = svg.append("g").attr("transform", "translate(40,0)");
    
  d3.select("svg")
    .style("width", "960")
    .style('height', "2400");

  var tree = d3.tree()
    .size([height - 400, width - 160]);

  var cluster = d3.cluster()
    .size([height, width - 160]);

  var stratify = d3.stratify()
    .parentId(function(d) { return d.id.substring(0, d.id.lastIndexOf(".")); });

   d3.csv("./../static/flare.csv", function(error, data) {
    if (error) throw error;

    var root = stratify(data)
        .sort(function(a, b) { return (a.height - b.height) || a.id.localeCompare(b.id); });
    
    tree(root);

    var link = g.selectAll(".link")
        .data(root.descendants().slice(1))
      .enter().append("path")
        .attr("class", "link")
        .attr("d", diagonal);

    var node = g.selectAll(".node")
        .data(root.descendants())
      .enter().append("g")
        .attr("class", function(d) { return "node" + (d.children ? " node--internal" : " node--leaf"); })
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

    node.append("circle")
        .attr("r", 2.5);

    node.append("text")
        .attr("dy", 3)
        .attr("x", function(d) { return d.children ? -8 : 8; })
        .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
        .text(function(d) { return d.id.substring(d.id.lastIndexOf(".") + 1); })
        .on("click", function (s){
          changed(s);
        })

    var timeout = setTimeout(function() {
      d3.select("input[value=\"tree\"]")
          .property("checked", true)
          .dispatch("change");
    }, 1000);

    function changed(s) {
        console.log("here");
        timeout = clearTimeout(timeout);
        // Change to new root
        root = s;
        console.log(root);
        tree(s);
        var t = d3.transition().duration(750);
        node.transition(t).attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
        link.transition(t).attr("d", diagonal);
      }
  });
  
}

function drawRoot(root){
  
}

function diagonal(d) {
  return "M" + d.y + "," + d.x
      + "C" + (d.parent.y + 100) + "," + d.x
      + " " + (d.parent.y + 100) + "," + d.parent.x
      + " " + d.parent.y + "," + d.parent.x;
}